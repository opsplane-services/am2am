name: CI/CD Workflow

on:
  push:
    branches:
      - 'master'
  pull_request:

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  
  check-commits:
    name: "Check conventional commits"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: webiny/action-conventional-commits@v1.1.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-please:
    name: "Release Please"
    needs: check-commits
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: rust
          repo-url: opsplane-services/am2am
    outputs:
      created: ${{ steps.release.outputs.release_created }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      tag_name: ${{ steps.release.outputs.tag_name }}

  ci:
    name: CI/CD build
    runs-on: ${{ matrix.platform.runs-on }}
    needs: release-please
    strategy:
      matrix:
        platform:
          - os-name: x86_64-unknown-linux-musl
            os-type: linux
            extension: ''
            runs-on: ubuntu-20.04
          - os-name: x86_64-unknown-linux-gnu
            os-type: linux
            extension: ''
            runs-on: ubuntu-20.04
          - os-name: aarch64-apple-darwin
            os-type: darwin
            extension: ''
            runs-on: macOS-latest
          - os-name: x86_64-apple-darwin
            os-type: darwin
            extension: ''
            runs-on: macOS-latest
          - os-name: x86_64-pc-windows-msvc
            os-type: windows
            extension: .exe
            runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/bin
            target
          key: ${{ matrix.platform.os-name }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.platform.os-name }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Check formatting
        run: cargo fmt --all -- --check
  
      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings
      
      - name: Run tests
        run: cargo test

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Audit dependencies
        run: cargo audit

      - name: Install Cross (Linux)
        if: matrix.platform.os-type == 'linux'
        run: |
          if ! command -v cross &>/dev/null; then
            cargo install cross --locked
          else
            echo "Cross is already installed, skipping installation."
          fi
      
      - name: Install cross (Windows)
        if: matrix.platform.os-type == 'windows'
        shell: powershell
        run: |
          if (-not (Get-Command cross -ErrorAction SilentlyContinue)) {
            Write-Host "Cross not found. Installing..."
            cargo install cross --locked
          } else {
            Write-Host "Cross is already installed."
          }

      - name: Build Binary
        if: matrix.platform.os-type != 'darwin' 
        run: |
          cross build --release --target ${{ matrix.platform.os-name }}
        env:
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_RUSTFLAGS: "-C target-feature=+crt-static"
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUSTFLAGS: "-C target-feature=+crt-static"
      
      - name: Build Binary (MacOS)
        if: matrix.platform.os-type == 'darwin' 
        run: |
          rustup target add ${{ matrix.platform.os-name }}
          cargo build --release --target ${{ matrix.platform.os-name }}
      
      - name: Create tar.gz
        if: (matrix.platform.os-type == 'linux' || matrix.platform.os-type == 'darwin') && needs.release-please.outputs.created == 'true'
        run: |
          mkdir -p artifacts
          tar -czvf artifacts/am2am-${{ matrix.platform.os-name }}.tar.gz -C target/${{ matrix.platform.os-name }}/release am2am
          sha256sum artifacts/am2am-${{ matrix.platform.os-name }}.tar.gz > artifacts/am2am-${{ matrix.platform.os-name }}.tar.gz.sha256.txt

      - name: Create zip (Windows)
        if: matrix.platform.os-type == 'windows' && needs.release-please.outputs.created == 'true'
        run: |
          mkdir -p artifacts
          powershell Compress-Archive -Path target\x86_64-pc-windows-msvc\release\am2am.exe -DestinationPath artifacts\am2am-${{ matrix.platform.os-name }}.zip
          certutil -hashfile ./artifacts/am2am-${{ matrix.platform.os-name }}.zip SHA256 > ./artifacts/am2am-${{ matrix.platform.os-name }}.zip.sha256.txt
          (Get-Content ./artifacts/am2am-${{ matrix.platform.os-name }}.zip.sha256.txt | Select-Object -Skip 1 | Select-Object -First 1) | Out-File ./artifacts/am2am-${{ matrix.platform.os-name }}.zip.sha256.txt
      
      - name: Upload Release Artifacts
        if: needs.release-please.outputs.created == 'true' && matrix.platform.os-type != 'windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: | 
          gh release upload ${{ needs.release-please.outputs.tag_name }} ./artifacts/am2am-${{ matrix.platform.os-name }}.tar.gz
          gh release upload ${{ needs.release-please.outputs.tag_name }} ./artifacts/am2am-${{ matrix.platform.os-name }}.tar.gz.sha256.txt
      
      - name: Upload Release Artifacts (Windows)
        if: needs.release-please.outputs.created == 'true' && matrix.platform.os-type == 'windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.release-please.outputs.tag_name }} ./artifacts/am2am-${{ matrix.platform.os-name }}.zip
          gh release upload ${{ needs.release-please.outputs.tag_name }} ./artifacts/am2am-${{ matrix.platform.os-name }}.zip.sha256.txt

      - name: Cargo Publish
        if: needs.release-please.outputs.created == 'true' && matrix.platform.os-name == 'x86_64-unknown-linux-gnu'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          rm -rf artifacts
          version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
          if cargo search $(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].name') | grep $version; then
            echo "Version $version already published."
            exit 0
          fi
          cargo publish --no-verify

  docker-publish:
    name: Docker Publish
    runs-on: ubuntu-20.04
    needs: [release-please, ci]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Nexus Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta build
        id: meta
        uses: docker/metadata-action@v4
        if: ${{ !needs.release-please.outputs.created }}
        with:
          images: ghcr.io/${{ github.repository_owner }}/am2am
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest

      - name: Docker meta release
        id: meta_release
        uses: docker/metadata-action@v4
        if: ${{ needs.release-please.outputs.created }}
        with:
          images: ghcr.io/${{ github.repository_owner }}/am2am
          tags: |
            type=ref,event=branch
            type=raw,value=${{ needs.release-please.outputs.tag_name }}
            type=raw,value=latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:latest
      
      #- name: Build and push
      #  uses: docker/build-push-action@v3
      #  if: ${{ !needs.release-please.outputs.created }}
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    platforms: linux/amd64,linux/arm64
      #    tags: ${{ steps.meta.outputs.tags }}
      #    labels: ${{ steps.meta.outputs.labels }}
      #    push: ${{ github.event_name != 'pull_request' }}

      #- name: Build and push release
      #  uses: docker/build-push-action@v3
      #  if: ${{ needs.release-please.outputs.created }}
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    tags: ${{ steps.meta_release.outputs.tags }}
      #    labels: ${{ steps.meta_release.outputs.labels }}
      #    push: ${{ github.event_name != 'pull_request' }}

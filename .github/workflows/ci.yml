name: CI/CD Workflow

on:
  push:
    branches:
      - 'master'
  pull_request:

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  ci:
    name: CI/CD build
    runs-on: ${{ matrix.platform.runs-on }}
    strategy:
      matrix:
        platform:
          - os-name: x86_64-unknown-linux-musl
            extension: ''
            runs-on: ubuntu-20.04
            features: native-tls
          #- os-name: x86_64-unknown-linux-gnu
          #  extension: ''
          #  runs-on: ubuntu-20.04
          #  features: native-tls
          #- os-name: x86_64-apple-darwin
          #  extension: ''
          #  runs-on: macOS-latest
          #- os-name: x86_64-pc-windows-msvc
          #  extension: .exe
          #  runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: webiny/action-conventional-commits@v1.1.0
        if: matrix.platform.os-name == 'x86_64-unknown-linux-gnu'
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: google-github-actions/release-please-action@v4
        id: release
        if: matrix.platform.os-name == 'x86_64-unknown-linux-gnu'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: rust
          repo-url: opsplane-services/am2am

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Install Cross (for cross-compilation)
        run: |
          if ! command -v cross &>/dev/null; then
            cargo install cross --locked
          else
            echo "Cross is already installed, skipping installation."
          fi

      - name: Build Binary
        run: |
          cross build --release --target ${{ matrix.platform.os-name }}
        env:
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_RUSTFLAGS: "-C target-feature=+crt-static"
      
      - name: Print target
        run: |
          ls -la target/${{ matrix.platform.os-name }}
          ls -la target/${{ matrix.platform.os-name }}/release

      - name: Login to Nexus Registry
        uses: docker/login-action@v3
        if: matrix.platform.os-name == 'x86_64-unknown-linux-gnu'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta build
        id: meta
        uses: docker/metadata-action@v4
        if: ${{ !steps.release.outputs.release_created && matrix.platform.os-name == 'x86_64-unknown-linux-gnu' }}
        with:
          images: ghcr.io/${{ github.repository_owner }}/am2am
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest

      - name: Docker meta release
        id: meta_release
        uses: docker/metadata-action@v4
        if: ${{ steps.release.outputs.release_created && matrix.platform.os-name == 'x86_64-unknown-linux-gnu' }}
        with:
          images: ghcr.io/${{ github.repository_owner }}/am2am
          tags: |
            type=ref,event=branch
            type=raw,value=${{ steps.release.outputs.tag_name }}
            type=raw,value=latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.platform.os-name == 'x86_64-unknown-linux-gnu'
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:latest

      #- name: Build and push
      #  uses: docker/build-push-action@v3
      #  if: ${{ !steps.release.outputs.release_created && matrix.platform.os-name == 'x86_64-unknown-linux-gnu' }}
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    platforms: linux/amd64,linux/arm64
      #    tags: ${{ steps.meta.outputs.tags }}
      #    labels: ${{ steps.meta.outputs.labels }}
      #    push: ${{ github.event_name != 'pull_request' }}

      #- name: Build and push release
      #  uses: docker/build-push-action@v3
      #  if: ${{ steps.release.outputs.release_created && matrix.platform.os-name == 'x86_64-unknown-linux-gnu' }}
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    tags: ${{ steps.meta_release.outputs.tags }}
      #    labels: ${{ steps.meta_release.outputs.labels }}
      #    push: ${{ github.event_name != 'pull_request' }}
